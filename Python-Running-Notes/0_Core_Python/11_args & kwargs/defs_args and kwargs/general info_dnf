## Links 
https://realpython.com/courses/python-kwargs-and-args/
https://realpython.com/courses/defining-python-functions-with-optional-arguments/ 

`*args` and `**kwargs` are special syntax in Python for passing a variable number of arguments to a function. 

`*args` allows a function to receive an arbitrary number of positional arguments, which are packed into a tuple. 

`**kwargs` allows a function to receive an arbitrary number of keyword arguments, which are packed into a dictionary.

Here's an example:

```
def my_func(*args, **kwargs):
    print("args: ", args)
    print("kwargs: ", kwargs)

# example usage
my_func(1, 2, 3, a='apple', b='banana')
```

Output:
```
args:  (1, 2, 3)
kwargs:  {'a': 'apple', 'b': 'banana'}
```

In the above example, `my_func()` takes in both positional and keyword arguments, which are then printed to the console. When the function is called with `my_func(1, 2, 3, a='apple', b='banana')`, `*args` is assigned to `(1, 2, 3)` and `**kwargs` is assigned to `{'a': 'apple', 'b': 'banana'}`.


## Examples 
Here are some examples of using `*args` and `**kwargs` in Python:

Example using `*args`:
```python
def sum_numbers(*args):
    result = 0
    for number in args:
        result += number
    return result

print(sum_numbers(1, 2, 3, 4)) # Output: 10
```

In this example, the `sum_numbers()` function takes any number of arguments as input and returns the sum of all the input numbers.

Example using `**kwargs`:
```python
def print_info(**kwargs):
    for key, value in kwargs.items():
        print(key + ": " + value)

print_info(name="John", age="30", country="USA")
# Output:
# name: John
# age: 30
# country: USA
```

In this example, the `print_info()` function takes any number of keyword arguments as input and prints each key-value pair on a separate line.