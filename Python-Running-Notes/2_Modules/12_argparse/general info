## Links 
https://realpython.com/courses/python-argparse-command-line-interfaces/ <br> 
https://realpython.com/courses/python-site-connectivity-checker/ <br>
https://laxfed.dev/python-python-basics-working-with-argparse-944734a65355 <br>
https://laxfed.dev/python-argparse-multiplicity-in-python-39d7ee891d79 <br>
https://lovethepenguin.com/python-how-to-read-command-line-arguments-d4f3221ac29d <br>


## Examples
`argparse` is a module in Python that allows easy parsing of command-line arguments. It makes it easy to write user-friendly command-line interfaces. Here's an example of how to use `argparse`:

```python
import argparse

parser = argparse.ArgumentParser(description='Process some integers.')
parser.add_argument('integers', metavar='N', type=int, nargs='+',
                    help='an integer for the accumulator')
parser.add_argument('--sum', dest='accumulate', action='store_const',
                    const=sum, default=max,
                    help='sum the integers (default: find the max)')

args = parser.parse_args()
print(args.accumulate(args.integers))
```

In this example, we are creating a command-line utility that accepts integers as input and either returns their sum or their maximum value, depending on the arguments passed. The `argparse` module allows us to specify the behavior of the program based on the arguments passed by the user.

Here's how the script would be used:

```
$ python argparse_example.py 1 2 3 4
4

$ python argparse_example.py 1 2 3 4 --sum
10
```

In the first example, the default behavior is used (i.e., the maximum value is returned). In the second example, the `--sum` option is used to specify that the sum of the values should be returned instead.

## Here are a few more examples:

Example 1: Simple Argument
```
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('name', help='Your name')
args = parser.parse_args()

print(f"Hello, {args.name}!")
```

In this example, we create a simple argument parser that accepts a single argument named `name`. When the user runs the script and provides a value for the `name` argument, the script prints out a greeting with their name.

Example 2: Boolean Argument
```
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('--verbose', action='store_true', help='Enable verbose output')
args = parser.parse_args()

if args.verbose:
    print("Verbose output enabled!")
else:
    print("Verbose output disabled.")
```

In this example, we create a boolean argument `--verbose` that can be used to enable or disable verbose output. When the user runs the script with the `--verbose` option, the script prints out a message indicating that verbose output has been enabled.

Example 3: Multiple Arguments
```
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('num1', type=int, help='First number')
parser.add_argument('num2', type=int, help='Second number')
parser.add_argument('--operation', choices=['add', 'subtract', 'multiply'], help='Operation to perform')
args = parser.parse_args()

if args.operation == 'add':
    result = args.num1 + args.num2
elif args.operation == 'subtract':
    result = args.num1 - args.num2
else:
    result = args.num1 * args.num2

print(f"Result: {result}")
```

In this example, we create multiple arguments, including two required arguments (`num1` and `num2`) and an optional argument (`--operation`) that can be used to specify which operation to perform on the numbers. The script then performs the specified operation on the numbers and prints out the result.