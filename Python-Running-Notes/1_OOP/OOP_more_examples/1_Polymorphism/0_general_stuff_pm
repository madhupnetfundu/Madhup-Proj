Link : https://www.youtube.com/watch?v=Ej_02ICOIgs&t=7554s

Examples of polymorphism in Python:

1. Polymorphic functions:
In Python, functions can be polymorphic if they can accept arguments of different types and perform different operations based on the type of the argument. Here's an example:

```python
def add(a, b):
    return a + b

print(add(2, 3))  # Output: 5
print(add("Hello, ", "world!"))  # Output: "Hello, world!"
```

In this example, the `add` function can add numbers or concatenate strings based on the types of the arguments.

2. Polymorphic methods:
In Python, methods can also be polymorphic if they can perform different operations based on the type of the object they are called on. Here's an example:

```python
class Shape:
    def area(self):
        pass

class Rectangle(Shape):
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def area(self):
        return self.width * self.height

class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return 3.14 * self.radius ** 2

shapes = [Rectangle(3, 4), Circle(5)]

for shape in shapes:
    print(shape.area())
```

In this example, we have a base `Shape` class with an empty `area` method. The `Rectangle` and `Circle` classes inherit from `Shape` and override the `area` method with their own implementation.

The `shapes` list contains objects of both `Rectangle` and `Circle` types. When we call the `area` method on each object in the loop, the correct implementation is dynamically bound based on the type of the object.

3. Polymorphic operators:
In Python, operators can also be polymorphic if they can perform different operations based on the types of the operands. Here's an example:

```python
class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __add__(self, other):
        return Point(self.x + other.x, self.y + other.y)

    def __str__(self):
        return f"({self.x}, {self.y})"

p1 = Point(1, 2)
p2 = Point(3, 4)

print(p1 + p2)  # Output: (4, 6)
```

In this example, we have a `Point` class with an overloaded `+` operator that can add two `Point` objects together by adding their corresponding `x` and `y` values. When we add `p1` and `p2`, the `+` operator is dynamically bound to the `__add__` method, which performs the correct operation based on the types of the operands.