Link : https://www.youtube.com/watch?v=Ej_02ICOIgs&t=5414s

Here are some examples of using setter and getter methods in Python:

1. Setter and getter methods for a class attribute:

```python
class Circle:
    def __init__(self, radius):
        self._radius = radius
        
    # Getter method
    @property
    def radius(self):
        return self._radius
    
    # Setter method
    @radius.setter
    def radius(self, value):
        if value < 0:
            raise ValueError("Radius cannot be negative")
        self._radius = value

# Creating an instance of the Circle class
c = Circle(5)

# Accessing the 'radius' attribute using the getter method
print(c.radius)   # Output: 5

# Updating the 'radius' attribute using the setter method
c.radius = 10
print(c.radius)   # Output: 10

# Trying to set a negative value for the 'radius' attribute (raises a ValueError)
c.radius = -5     # Output: ValueError: Radius cannot be negative
```

2. Setter and getter methods for an instance attribute:

```python
class BankAccount:
    def __init__(self, balance):
        self._balance = balance
        
    # Getter method
    def get_balance(self):
        return self._balance
    
    # Setter method
    def set_balance(self, value):
        if value < 0:
            raise ValueError("Balance cannot be negative")
        self._balance = value
        
# Creating an instance of the BankAccount class
acct = BankAccount(100)

# Accessing the 'balance' attribute using the getter method
print(acct.get_balance())   # Output: 100

# Updating the 'balance' attribute using the setter method
acct.set_balance(200)
print(acct.get_balance())   # Output: 200

# Trying to set a negative value for the 'balance' attribute (raises a ValueError)
acct.set_balance(-50)       # Output: ValueError: Balance cannot be negative
```

In both of these examples, we're using setter and getter methods to provide controlled access to class attributes. By using the `@property` and `@<attribute_name>.setter` decorators, we can treat attributes like methods, and add additional logic to control access to those attributes.