## Ref link: 
https://www.youtube.com/watch?v=zS0HyfN7Pm4 

In object-oriented programming (OOP), `super()` is a built-in function in Python that allows a subclass to call the methods of its parent class. It is used when a derived class overrides a method or constructor of the base class but still wants to use the implementation of the base class.

Here are a few examples to illustrate the use of `super()` in OOP:

Example 1: Inheriting and Overriding a Method

```python
class Animal:
    def speak(self):
        print("Animal is speaking.")

class Dog(Animal):
    def speak(self):
        print("Dog is barking.")
        super().speak()  # call speak() method of parent class

dog = Dog()
dog.speak()  # Output: Dog is barking. Animal is speaking.
```

In this example, we have a base class `Animal` that has a method `speak()`. The derived class `Dog` inherits from the `Animal` class and overrides the `speak()` method with its own implementation. However, before executing the overridden method, `super().speak()` is used to call the `speak()` method of the parent class. This ensures that the original behavior of `speak()` is also executed, along with any additional behavior added by the derived class.

Example 2: Inheriting and Overriding a Constructor

```python
class Animal:
    def __init__(self, name):
        self.name = name

class Dog(Animal):
    def __init__(self, name, breed):
        super().__init__(name)  # call __init__() method of parent class
        self.breed = breed

dog = Dog("Rover", "Golden Retriever")
print(dog.name)   # Output: Rover.  # Note: name is inherited from Animal class. Also, note that we don't need to pass self as an argument to super().__init__(). 
print(dog.breed)  # Output: Golden Retriever. # Note: breed is specific to Dog class. # Note: name is inherited from Animal class. Also, note that we don't need to pass self as an argument to super().__init__().
```

In this example, we have a base class `Animal` that has a constructor `__init__()` that takes a `name` parameter. The derived class `Dog` inherits from the `Animal` class and overrides the `__init__()` method with its own implementation that takes a `name` and `breed` parameter. However, before executing the overridden constructor, `super().__init__(name)` is used to call the constructor of the parent class, which initializes the `name` attribute inherited from the `Animal` class.

By using `super()` to call the constructor of the parent class, we can reuse the initialization logic of the base class and avoid code duplication.

Overall, `super()` is a useful tool in OOP that allows for the reuse of code and the extension of behavior in derived classes. It helps to maintain the hierarchy and order of inheritance, while still allowing for customization and flexibility in subclass implementations.