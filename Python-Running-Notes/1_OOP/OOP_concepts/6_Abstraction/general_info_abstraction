Data abstraction is a fundamental concept in object-oriented programming (OOP) that involves representing complex data types in a simplified manner by hiding unnecessary implementation details and exposing only the essential features of the data type. In other words, data abstraction is the process of focusing on the "what" rather than the "how" of a data type.

In OOP, data abstraction is achieved through the use of abstract classes and interfaces. An abstract class is a class that cannot be instantiated on its own, but must be subclassed to be used. It contains one or more abstract methods, which are methods that do not have an implementation in the abstract class, but must be implemented in any concrete subclasses.

Interfaces, on the other hand, are a way of specifying a set of methods that a class must implement, without providing any implementation details. An interface is similar to an abstract class, but all its methods are abstract, and it cannot contain any data members.

By using abstract classes and interfaces, OOP allows developers to create data types that can be used without worrying about their underlying implementation details. This makes it easier to write complex programs, as developers can focus on using the data types rather than implementing them from scratch.

For example, let's say you are creating a program that involves shapes, such as circles and rectangles. Rather than creating separate classes for each shape, you could create an abstract class called `Shape` that contains abstract methods for calculating the area and perimeter of a shape. Then, you could create concrete subclasses of `Shape` for each specific shape, such as `Circle` and `Rectangle`, which implement the area and perimeter methods for their respective shapes. By doing this, you can use the `Shape` class to represent any shape in your program, without worrying about the specific implementation details of each shape.



Let's take the example of a simple program that involves creating shapes and calculating their areas. Here's an implementation that doesn't use data abstraction:

```python
class Circle:
    def __init__(self, radius):
        self.radius = radius
        
    def area(self):
        return 3.14 * self.radius ** 2
    
class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width
        
    def area(self):
        return self.length * self.width
    
# Create some shapes
circle = Circle(5)
rectangle = Rectangle(3, 4)

# Calculate their areas
print(circle.area())        # Output: 78.5
print(rectangle.area())     # Output: 12
```

In this implementation, we have separate classes for each shape, `Circle` and `Rectangle`, and each class has its own implementation of the `area` method. This works fine for a simple program like this, but what if we want to add more shapes later on? We would have to create a new class for each shape, and write a new implementation of the `area` method for each class.

Now let's try the same program using data abstraction:

```python
from abc import ABC, abstractmethod

class Shape(ABC):
    @abstractmethod # decorator
    def area(self):
        pass
    
class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius
        
    def area(self):
        return 3.14 * self.radius ** 2
    
class Rectangle(Shape):
    def __init__(self, length, width):
        self.length = length
        self.width = width
        
    def area(self):
        return self.length * self.width
    
# Create some shapes
circle = Circle(5)
rectangle = Rectangle(3, 4)

# Calculate their areas
print(circle.area())        # Output: 78.5
print(rectangle.area())     # Output: 12
```

In this implementation, we have created an abstract class called `Shape` that defines the `area` method as an abstract method. We then created concrete subclasses of `Shape` for each specific shape, `Circle` and `Rectangle`, which implement the `area` method for their respective shapes.

By doing this, we have separated the interface of each shape (the `area` method) from its implementation details. This means that we can easily add more shapes to our program without having to modify the existing code. All we have to do is create a new subclass of `Shape` that implements the `area` method for the new shape.

Data abstraction is particularly useful when dealing with large and complex programs, where it's important to separate the essential features of a data type from its implementation details. By doing this, we can create more modular and maintainable code, which is easier to understand and modify.