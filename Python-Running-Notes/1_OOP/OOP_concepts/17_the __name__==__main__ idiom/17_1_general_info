## Nice links to Refer
Good one: https://www.udemy.com/course/complete-python-bootcamp/learn/lecture/9497634#overview 
https://pythonhow.com/what/What-is-i-name-main/ 
https://realpython.com/if-name-main-python/ 
</br></br></br>


## Gyan 
In Python, when a script is run, the interpreter assigns the special variable `__name__` a value of `"__main__"` if the script is being run as the main program. However, if the script is being imported as a module into another program, then `__name__` will be assigned the name of the module. The `__name__ == "__main__"` idiom is a common technique used to differentiate between the two scenarios.

The main use case of this idiom is to allow a Python module to be both imported as a module and run as a standalone script. When a script is run as a standalone program, the code in the `if __name__ == "__main__":` block is executed. This is useful for testing purposes or for running the module as a command-line utility.

Here's an example to help appreciate the use case of `__name__ == "__main__"` idiom:

Suppose we have a module named `example.py` containing the following code:

```python
def add(a, b):
    return a + b

if __name__ == "__main__":
    print(add(2, 3))
```

If we run the `example.py` script, the output will be `5`, since the `if __name__ == "__main__":` block is executed and `add(2, 3)` is called.

However, if we import the `example.py` module into another Python script using `import example`, the `if __name__ == "__main__":` block will not be executed. This allows us to use the `add()` function in the `example` module without also executing the `print(add(2, 3))` statement.

In summary, the `__name__ == "__main__"` idiom is a useful technique that allows Python modules to be both imported as modules and run as standalone programs.