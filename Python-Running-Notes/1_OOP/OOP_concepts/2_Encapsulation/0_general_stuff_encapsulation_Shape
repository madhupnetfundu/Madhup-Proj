Encapsulation is a fundamental concept in object-oriented programming that helps to hide the implementation details of a class from its users. In Python, encapsulation is typically achieved through the use of private and protected attributes and methods.

Here are a few examples of encapsulation in Python:

1. Private attributes:
In Python, private attributes can be defined by prefixing their names with double underscores (`__`). Private attributes are not directly accessible outside the class, and can only be accessed through getter and setter methods. Here's an example:

```python
class Person:
    def __init__(self, name, age):
        self.__name = name
        self.__age = age

    def get_name(self):
        return self.__name

    def set_name(self, name):
        self.__name = name

    def get_age(self):
        return self.__age

    def set_age(self, age):
        self.__age = age

person = Person("John", 30)
print(person.get_name())  # Output: "John"
person.set_name("Jane")
print(person.get_name())  # Output: "Jane"
```

In this example, the `Person` class has private attributes `__name` and `__age`. These attributes are not directly accessible outside the class, and can only be accessed through getter and setter methods.

2. Protected attributes and methods:
In Python, protected attributes and methods can be defined by prefixing their names with a single underscore (`_`). Protected attributes and methods are not directly accessible outside the class, but can be accessed by subclasses. Here's an example:

```python
class Shape:
    def __init__(self, x, y):
        self._x = x
        self._y = y

    def _draw(self):
        pass

class Rectangle(Shape):
    def __init__(self, x, y, width, height):
        super().__init__(x, y)  ### super() function is used to give access to methods and properties of a parent or sibling class. The super() function returns an object that represents the parent class. By using the super() function, you do not have to use the name of the parent element, it will automatically inherit the methods and properties from its parent. Further refer to https://www.w3schools.com/python/ref_func_super.asp and the note at the bottom of this file.
        self.width = width
        self.height = height

    def draw(self):
        self._draw()
        print(f"Drawing rectangle at ({self._x}, {self._y}) with width {self.width} and height {self.height}")

class Circle(Shape):
    def __init__(self, x, y, radius):
        super().__init__(x, y)
        self.radius = radius

    def draw(self):
        self._draw()
        print(f"Drawing circle at ({self._x}, {self._y}) with radius {self.radius}")

shapes = [Rectangle(0, 0, 10, 20), Circle(5, 5, 10)]

for shape in shapes:
    shape.draw()
```

In this example, the `Shape` class has a protected attribute `_x` and a protected method `_draw`. The `Rectangle` and `Circle` classes inherit from `Shape` and override the `draw` method with their own implementation. They can also access the protected attribute `_x` and the protected method `_draw`.

The `shapes` list contains objects of both `Rectangle` and `Circle` types. When we call the `draw` method on each object in the loop, the correct implementation is dynamically bound based on the type of the object, and the protected attribute and method are accessed by the subclasses.



super() related note: The super() keyword in the program you provided is used to call the parent class's constructor. In this case, the super() keyword is used to call the Shape class's constructor from the Rectangle and Circle classes.

The super() keyword is useful when you want to inherit from a class and you want to make sure that the parent class's constructor is called. This is important because the parent class's constructor may do important initialization work that is necessary for the child class to work properly.

In the program you provided, the Shape class's constructor initializes the _x and _y attributes. The Rectangle and Circle classes inherit from the Shape class, so they also have the _x and _y attributes. However, the Rectangle and Circle classes also have their own attributes, such as width and height for the Rectangle class and radius for the Circle class.

When the Rectangle and Circle classes' constructors are called, the super() keyword is used to call the Shape class's constructor. This ensures that the _x and _y attributes are initialized before the Rectangle and Circle classes' own attributes are initialized.

Here is a breakdown of what happens when the Rectangle and Circle classes' constructors are called:

The super() keyword is used to call the Shape class's constructor.
The _x and _y attributes are initialized in the Shape class's constructor.
The width and height attributes are initialized in the Rectangle class's constructor.
The radius attribute is initialized in the Circle class's constructor.
The super() keyword is a powerful tool that can be used to inherit from classes and to ensure that the parent class's methods are called. However, it is important to note that the super() keyword is not always necessary. For example, if the parent class does not have a constructor, then the super() keyword is not necessary. In addition, if the parent class's constructor does not do any important initialization work, then the super() keyword is not necessary. In these cases, you can simply call the parent class's constructor directly. For example, if the Shape class did not have a constructor, then you could simply call the Rectangle and Circle classes' constructors directly without using the super() keyword. 