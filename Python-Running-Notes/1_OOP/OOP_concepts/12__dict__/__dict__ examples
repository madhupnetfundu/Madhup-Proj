Here are some more examples of using the `__dict__` attribute in Python:

Example 1: Adding attributes dynamically

```python
class Car:
    def __init__(self, make, model):
        self.make = make
        self.model = model

# Create a Car instance and add an attribute dynamically
car = Car('Toyota', 'Corolla')
car.__dict__['color'] = 'blue'

# Access the new attribute using dot notation
print(car.color)  # Output: 'blue'
```

Example 2: Copying attributes between objects

```python
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

# Create two Person instances
p1 = Person('Alice', 30)
p2 = Person('Bob', 25)

# Copy attributes from p1 to p2
for key, value in p1.__dict__.items():
    p2.__dict__[key] = value

# Print the attributes of p2
print(p2.name)  # Output: 'Alice'
print(p2.age)   # Output: 30
```

Example 3: Printing object attributes as a dictionary

```python
class Book:
    def __init__(self, title, author):
        self.title = title
        self.author = author

    def __repr__(self):
        return str(self.__dict__)

# Create a Book instance and print its attributes as a dictionary
book = Book('The Catcher in the Rye', 'J.D. Salinger')
print(book)  # Output: {'title': 'The Catcher in the Rye', 'author': 'J.D. Salinger'}
```

Note that in general, it is recommended to use regular attribute access methods instead of accessing an object's `__dict__` attribute directly, as this can make your code more readable and maintainable. The `__dict__` attribute should be used sparingly and only when necessary.