Here are a few more examples of class methods in Python:

Example 1: Using class methods to count the number of instances of a class
```Python
class Person:
    count = 0

    def __init__(self, name, age):
        self.name = name
        self.age = age
        Person.count += 1

    @classmethod
    def get_count(cls):
        return cls.count


person1 = Person("Alice", 25)
person2 = Person("Bob", 30)
print(Person.get_count())  # Output: 2
```

In this example, we define a `Person` class with an instance variable `count` that keeps track of the number of instances of the class . We use a class method `get_count` to retrieve the count of instances. When an instance of `Person` is created, the `__init__` method is called, which increments the `count` variable by 1.

ðŸ’¡When the person2 line is executed, it will not start getting executed from the line where we declare the Person class. Instead, it will start getting executed from the __init__ method. The __init__ method is called when a new Person object is created, and it is responsible for initializing the object's attributes. In this case, the __init__ method will set the name of the Person object to Bob and the age of the Person object to 30.

The Person class definition is only executed once, when the Person class is first defined. The __init__ method is executed each time a new Person object is created.

Example 2: Using class methods to create a singleton pattern
```Python
class Singleton:
    instance = None

    def __init__(self):
        if Singleton.instance is not None:
            raise Exception("Singleton instance already exists!")
        Singleton.instance = self

    @classmethod
    def get_instance(cls):
        if Singleton.instance is None:
            Singleton()
        return Singleton.instance


singleton1 = Singleton.get_instance() # Output: Singleton instance created! 
singleton2 = Singleton.get_instance() # Output: Singleton instance already exists!
print(singleton1 == singleton2)  # Output: True
```

In this example, we define a `Singleton` class that allows only one instance to be created. We use a class method `get_instance` to create an instance of the class . The `__init__` method checks whether an instance of the class has already been created, and raises an exception if it has. The `get_instance` method checks whether an instance of the class exists, and creates one if it doesn't. The `get_instance` method then returns the instance.

When `singleton1` and `singleton2` are created using the `get_instance` method, they refer to the same instance of the class , since the `__init__` method has already been called and set the `instance` variable to the first instance created.
