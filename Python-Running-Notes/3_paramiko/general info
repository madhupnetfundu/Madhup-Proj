## General info

Paramiko is a Python library that provides an interface to SSH (Secure Shell) protocol for secure communication between two remote systems. It is used for establishing a secure connection between the local and remote computer, executing commands on the remote system, and transferring files between them.

Here's an example of how to use Paramiko to connect to a remote server and execute a command:

```python
import paramiko

# Set the hostname, username, and password for the remote server
hostname = "remote_server_hostname"
username = "remote_username"
password = "remote_password"

# Create a new SSH client and connect to the remote server
ssh_client = paramiko.SSHClient()
ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
ssh_client.connect(hostname, username=username, password=password)

# Execute a command on the remote server
stdin, stdout, stderr = ssh_client.exec_command("ls")

# Print the output of the command
print(stdout.read().decode())

# Close the SSH client
ssh_client.close()
```

In this example, we first import the Paramiko library. Then, we set the hostname, username, and password for the remote server that we want to connect to. We create a new SSH client using `paramiko.SSHClient()`, and then connect to the remote server using the `connect()` method. 

After connecting, we execute a command on the remote server using the `exec_command()` method, and capture the standard input, output, and error streams using `stdin`, `stdout`, and `stderr` variables. Finally, we print the output of the command using `stdout.read().decode()`, and close the SSH client using `ssh_client.close()`.

In addition to executing commands on a remote server, Paramiko also provides functionality for transferring files between local and remote systems. Here's an example of how to use Paramiko to transfer a file from the local system to a remote server:

```python
import paramiko

# Set the hostname, username, and password for the remote server
hostname = "remote_server_hostname"
username = "remote_username"
password = "remote_password"

# Create a new SSH client and connect to the remote server
ssh_client = paramiko.SSHClient()
ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
ssh_client.connect(hostname, username=username, password=password)

# Create a new SFTP client and upload a file to the remote server
sftp_client = ssh_client.open_sftp()
local_path = "/path/to/local/file.txt"
remote_path = "/path/to/remote/file.txt"
sftp_client.put(local_path, remote_path)

# Close the SFTP client and SSH client
sftp_client.close()
ssh_client.close()
```

In this example, we first create an SSH client and connect to the remote server, just like in the previous example. We then create a new SFTP client using `ssh_client.open_sftp()`, and use the `put()` method to transfer a file from the local system to the remote server. Finally, we close the SFTP and SSH clients using `sftp_client.close()` and `ssh_client.close()`, respectively.

<br>

## Key based authentication using paramiko 
Sure, here's an example of using key-based authentication with SSH using Paramiko in Python:

```python
import paramiko

# Define the host and credentials
host = 'example.com'
username = 'user'
key_file = '/path/to/private/key'

# Create an SSH client object
client = paramiko.SSHClient()

# Automatically add the host key if not already present
client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

# Load the private key for authentication
key = paramiko.RSAKey.from_private_key_file(key_file)

# Connect to the host using the key-based authentication
client.connect(hostname=host, username=username, pkey=key)

# Now that we are connected, we can execute commands on the remote server
stdin, stdout, stderr = client.exec_command('ls')

# Print the output of the command
print(stdout.read().decode())

# Close the SSH connection
client.close()
```

In this example, we are connecting to a remote host using the `paramiko.SSHClient()` class. We then set the missing host key policy to automatically add the host key if it's not already present. Next, we load the private key for authentication using the `paramiko.RSAKey.from_private_key_file()` method. Finally, we connect to the remote host using the `client.connect()` method with the hostname, username, and private key.

Once we're connected, we can execute commands on the remote server using the `client.exec_command()` method. In this example, we execute the `ls` command and print the output. Finally, we close the SSH connection using `client.close()`.