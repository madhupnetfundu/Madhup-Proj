### Watch out for the below points while using logging module in python:
<br><br>
![logger handler formatter](../Python_Images/logger_handler_formatter.jpg)
<br><br><br><br><br><br>
![logger handler formatter workflow](../Python_Images/logger_handler_formatter_workflow.jpg)
<br><br>
![basic config for logging](../Python_Images/logging_basic_config.jpg)
<br><br>
![log all events above DEBUG](../Python_Images/log%20all%20events%20above%20debug.jpg)
<br><br>
![filename_filemode_format](..//Python_Images/logging_filename_filemode_format.jpg)

![fileConfig and dictConfig](../Python_Images/logging_fileConfig_DictConfig.jpg)
<br>
ðŸ’¡Remember the following (VVIP):
![Handler Tip](../Python_Images/logging%20handler%20tip.jpg)

<br><br>
## Links 
[logging â€” Logging facility for Python_VVIP for api reference](https://docs.python.org/3/library/logging.html) <br>

https://realpython.com/lessons/logging-python-introduction/ --> vid 
<br>

https://realpython.com/python-logging/ 
<br>

[Python Logging: A Stroll Through the Source Code](https://realpython.com/python-logging-source-code/) --> advanced
<br>

[logging â€” Logging facility for Python](https://docs.python.org/3/library/logging.html) --> official doc for logging
<br>

[Python logging tutorial: loggers, handlers, and formatters](https://www.youtube.com/watch?v=b4Ms4wxJuPg) --> vid from Teclado
<br>

[Python Logging Basics](https://www.loggly.com/ultimate-guide/python-logging-basics/)
<br>

[in-depth-python-logging](https://www.toptal.com/python/in-depth-python-logging) --> Good one 
<br>

[Logging in Python: A Developerâ€™s Guide](https://blog.sentry.io/logging-in-python-a-developers-guide/) --> Good one


[8 Advanced Python Logging Features that You Shouldnâ€™t Miss](https://towardsdatascience.com/8-advanced-python-logging-features-that-you-shouldnt-miss-a68a5ef1b62d) --> Good one
<br>

[Logging from Hitchhiker's guide](https://docs.python-guide.org/writing/logging/?source=post_page-----a68a5ef1b62d--------------------------------)
<br>

[Logging HOWTO](https://docs.python.org/3/howto/logging.html)
<br>

[Logging Cookbook](https://docs.python.org/3/howto/logging-cookbook.html)
<br>

[Medium article regarding logging](https://medium.com/analytics-vidhya/the-python-logging-cheatsheet-easy-and-fast-way-to-get-logging-done-in-python-aa3cb99ecfe8)

Inputs from Libin: 
```bash
## Go through :
escs-im\escs-im\escs-im-ops\escs-datacenter\common\python\common\logging.py
escs-im\escs-im-ops\escs-datacenter\common\python\common\messages.py
```

## Basic Info Regarding Logging

Logging is a process of recording events, messages, and data that occur during the execution of a program. It helps in understanding the behavior of the program, identifying issues, and debugging errors. Python has a built-in logging module that provides a flexible and customizable logging framework.

To use the logging module, we first need to import it:

```python
import logging
```

The most basic way to log messages is to use the `logging.debug()`, `logging.info()`, `logging.warning()`, `logging.error()`, and `logging.critical()` methods, which correspond to different log levels. For example:

```python
import logging

# Configure the logging
logging.basicConfig(filename='example.log', level=logging.DEBUG)

# Log messages
logging.debug('This is a debug message')
logging.info('This is an info message')
logging.warning('This is a warning message')
logging.error('This is an error message')
logging.critical('This is a critical message')
```

This code will create a `example.log` file in the same directory as the script and log messages at different levels to the file. The `basicConfig()` method is used to configure the logger with a filename and log level.

In addition to the basic logging functionality, the logging module also provides advanced features like logging to multiple destinations, filtering messages based on severity, and customizing log formatting.

Here is an example of how to use logging to log messages to both a file and console:

```python
import logging

# Configure the logging
logging.basicConfig(level=logging.DEBUG,
                    format='%(asctime)s [%(levelname)s] %(message)s',
                    handlers=[logging.FileHandler('example.log'),
                              logging.StreamHandler()])

# Log messages
logging.debug('This is a debug message')
logging.info('This is an info message')
logging.warning('This is a warning message')
logging.error('This is an error message')
logging.critical('This is a critical message')
```

In this example, we use the `basicConfig()` method to configure the logger with a log level of `DEBUG`, a custom log format that includes the timestamp and log level, and two handlers: a `FileHandler` to write messages to a file, and a `StreamHandler` to write messages to the console.

Logging can also be used to log exceptions and stack traces, which can be very helpful in debugging. Here's an example:

```python
import logging

# Configure the logging
logging.basicConfig(filename='example.log', level=logging.DEBUG)

# Log an exception and stack trace
try:
    result = 1 / 0
except Exception as e:
    logging.error('An error occurred: %s', e, exc_info=True)
```

In this example, we use a `try`-`except` block to catch an exception (in this case, a division by zero), and then use the `error()` method to log an error message that includes the exception information (the `%s` in the message string is replaced with the string representation of the exception object), as well as the stack trace (the `exc_info=True` parameter tells the logger to include the stack trace in the log message).

Overall, logging is a powerful tool that can help you debug your code, track down issues, and gain insights into the behavior of your program.


