Client-side load balancing—Give the client the list of possible endpoints, and let it decide which one to call.

`Service discovery`- A mechanism for finding the periodically updated list of healthy endpoints for a particular logical service.

`Circuit breaking`- Shed load for a period of time to a service that appears to be misbehaving.

`Bulkheading`- Limit client resource usage with explicit thresholds (connections, threads, sessions, and so on) when making calls to a service.

`Timeouts` Enforce time limitations on requests, sockets, liveness, and so on when making calls to a service.

`Retries` - Retry a failed request.

`Retry budgets` - Apply constraints to retries: that is, limit the number of retries in a given period (for example, only retry 50% of the calls in a 10-second window).

`Deadlines` — Give requests context about how long a response may still be useful; if outside the deadline, disregard processing the request.



------------------------------

Installing Istio:
`
    - mkdir istio ; cd istio

    - curl -L https://istio.io/downloadIstio | sh -

    - export PATH="$PATH:/root/istio/istio-1.21.1/bin" -- can put this in .bashrc

    - istioctl x precheck

    - istioctl install --set profile=demo

    - istioctl verify-install
`
<br>

- Optional (installaion of addons) <br>

    - kubectl apply -f ./samples/addons --> from the istio directory (step 1)
 
    

    

            [root@fedora-s-2vcpu-4gb-blr1-01 istio-1.21.1]# pwd
            /root/istio/istio-1.21.1
            [root@fedora-s-2vcpu-4gb-blr1-01 istio-1.21.1]# k apply -f samples/addons/
            serviceaccount/grafana created
            configmap/grafana created
            service/grafana created
            deployment.apps/grafana created
            configmap/istio-grafana-dashboards created
            configmap/istio-services-grafana-dashboards created
            deployment.apps/jaeger created
            service/tracing created
            service/zipkin created
            service/jaeger-collector created
            serviceaccount/kiali created
            configmap/kiali created
            clusterrole.rbac.authorization.k8s.io/kiali-viewer created
            clusterrole.rbac.authorization.k8s.io/kiali created
            clusterrolebinding.rbac.authorization.k8s.io/kiali created
            role.rbac.authorization.k8s.io/kiali-controlplane created
            rolebinding.rbac.authorization.k8s.io/kiali-controlplane created
            service/kiali created
            deployment.apps/kiali created
            serviceaccount/loki created
            configmap/loki created
            configmap/loki-runtime created
            service/loki-memberlist created
            service/loki-headless created
            service/loki created
            statefulset.apps/loki created
            serviceaccount/prometheus created
            configmap/prometheus created
            clusterrole.rbac.authorization.k8s.io/prometheus created
            clusterrolebinding.rbac.authorization.k8s.io/prometheus created
            service/prometheus created
            deployment.apps/prometheus created



when an application is deployed, an istio side car may not be available by default along with the application pods. This is because the application or default ns is not enabled for istio injection.
Soln:
```
kubectl label namespace default istio-injection=enabled 
### makes the default ns ready for istio sidecar injections.
```	

Inspect istio related issues by running the below command:
istio analyze